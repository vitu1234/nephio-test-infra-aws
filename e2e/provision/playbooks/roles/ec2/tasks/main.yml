---
# tasks file for ec2
- name: Installing boto & boto3 on local system
  pip:
    name: "{{ item }}"
    state: present
  loop: "{{ python_pkgs }}"

# create VPC and other resources for instances
- name: Create VPC
  ec2_vpc_net:
    name: "{{ vpc_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ region_name }}"
    tags:
      Name: "{{ vpc_name }}"
  register: my_vpc

- name: Output VPC ID
  debug:
    msg: "VPC ID is {{ my_vpc.vpc.id }}"

- name: Create subnet
  ec2_vpc_subnet:
    state: present
    vpc_id: "{{ my_vpc.vpc.id }}"
    cidr: "{{ subnet_cidr_block }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ region_name }}"
    tags:
      Name: "{{ vpc_name }}-subnet"
  register: my_subnet

- name: Output Subnet ID
  debug:
    msg: "Subnet ID is {{ my_subnet.subnet.id }}"

- name: Create internet gateway
  ec2_vpc_igw:
    vpc_id: "{{ my_vpc.vpc.id }}"
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    tags:
      Name: "{{ vpc_name }}-igw"
  register: igw

- name: Output Internet Gateway ID
  debug:
    msg: "Internet Gateway ID is {{ igw.gateway_id }}"

- name: Create and associate route table
  community.aws.ec2_vpc_route_table:
    vpc_id: "{{ my_vpc.vpc.id }}"
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    tags:
      Name: "{{ vpc_name }}-rt"
    subnets:
    - "{{ my_subnet.subnet.id }}"
    routes:
    - dest: 0.0.0.0/0
      gateway_id: "{{ igw.gateway_id }}"
  register: my_route_table

- name: Add route to the internet
  community.aws.ec2_vpc_route_table:
    vpc_id: "{{ my_vpc.vpc.id }}"
    tags:
      Name: "{{ vpc_name }}-rt"
    routes:
    - dest: 0.0.0.0/0
      gateway_id: "{{ igw.gateway_id }}"
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"

- name: Creating Security Group for K8s Cluster
  amazon.aws.ec2_security_group:
    name: "{{ sg_name }}"
    description: Security Group for allowing all port
    region: "{{ region_name }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    vpc_id: "{{ my_vpc.vpc.id }}"
    rules:
    - proto: tcp
      ports:
      - 22
      cidr_ip: 0.0.0.0/0
      rule_desc: allow all on ssh port
    - proto: all
      cidr_ip: 0.0.0.0/0
    rules_egress:
    - proto: all
      cidr_ip: 0.0.0.0/0
  register: my_sg

- name: Launching three EC2 instances on AWS
  amazon.aws.ec2_instance:
    # name: "public-compute-instance2"
    key_name: "{{ keypair }}"
    vpc_subnet_id: "{{ my_subnet.subnet.id }}"
    instance_type: "{{ instance_flavour }}"
    security_group: "{{ my_sg.group_id }}"
    aws_access_key: "{{ access_key }}"
    aws_secret_key: "{{ secret_key }}"
    region: "{{ region_name }}"
    network:
      assign_public_ip: true
    image_id: "{{ ami_id }}"
    volumes:
    - device_name: /dev/sda1
      ebs:
        volume_size: 200
        delete_on_termination: true
    tags:
      Name: "{{ item }}"
  register: ec2
  loop: "{{ instance_tag }}"

- debug:
    msg: "{{ ec2 }}"

# - name: Attach Volumes
#   amazon.aws.ec2_vol:
#     instance: "{{ item.instance_ids[0] }}"
#     # id: "{{ item.instance_ids[0] }}"
#     volume_size: 200
#     volume_type: gp2
#     delete_on_termination: yes
#     region: "{{ region_name }}"
#     aws_access_key: "{{ access_key }}"
#     aws_secret_key: "{{ secret_key }}"
#   loop: "{{ ec2.results }}"
#   register: ec2_vol


# - debug:
#     msg: "{{ ec2 }}"
- name: Set ec2 facts
  set_fact:
    public_dns_name: "{{ ec2.results[0].instances[0].public_dns_name }}"
    ec2_master_ip: "{{ ec2.results[0].instances[0].public_ip_address }}"
    ec2_slave1_ip: "{{ ec2.results[1].instances[0].public_ip_address }}"
    ec2_slave2_ip: "{{ ec2.results[2].instances[0].public_ip_address }}"
  delegate_to: localhost

- name: Add 1st instance to host group ec2_master
  add_host:
    hostname: "{{ ec2.results[0].instances[0].public_ip_address }}"
    groupname: ec2_master

- name: Add 2nd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[1].instances[0].public_ip_address }}"
    groupname: ec2_slave

- name: Add 3rd instance to host group ec2_slave
  add_host:
    hostname: "{{ ec2.results[2].instances[0].public_ip_address }}"
    groupname: ec2_slave

- name: Wait for SSH to come up
  wait_for:
    host: "{{ ec2.results[2].instances[0].public_dns_name }}"
    port: 22
    state: started
  delegate_to: localhost
